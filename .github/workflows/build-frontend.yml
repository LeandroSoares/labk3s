name: Build Frontend

on:
  push:
    branches: [ main ]
    paths:
      - 'src/frontend/**'
      - '.github/workflows/build-frontend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/frontend/**'
  # Permite execu√ß√£o manual do workflow
  workflow_dispatch:
  # Permite ser chamado por outros workflows
  workflow_call:

env:
  VERSION: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Cache npm dependencies para instala√ß√£o r√°pida
      - name: Cache Node Modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: ./src/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('./src/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies and build CSS
        working-directory: ./src/frontend
        run: |
          npm ci
          npx tailwindcss -i ./src/input.css -o ./dist/output.css --minify

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./src/frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:${{ env.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:buildcache,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:${{ env.VERSION }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # N√£o falha a pipeline, apenas reporta
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Gerar relat√≥rio para o GitHub Summary
      - name: Generate Trivy Summary Report
        if: always()
        run: |
          echo "## üîí Trivy Security Scan - Frontend Image" >> $GITHUB_STEP_SUMMARY
          echo "Security vulnerabilities found in ${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Executar novamente o Trivy em formato de tabela para o summary
          trivy image --no-progress --ignore-unfixed --severity HIGH,CRITICAL ${{ secrets.DOCKERHUB_USERNAME }}/joke-frontend:${{ env.VERSION }} | tee trivy-report.txt
          
          if [ -s trivy-report.txt ]; then
            echo "### Vulnerabilidades Encontradas:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat trivy-report.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada!" >> $GITHUB_STEP_SUMMARY
          fi

      # Upload do relat√≥rio SARIF para o GitHub Security
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
