name: deploy-terraform

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  # Permite execu칞칚o manual do workflow
  workflow_dispatch:

env:
  VERSION: ${{ github.sha }}
  TF_LOG: INFO

jobs:
   
  deploy:
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform
        continue-on-error: true
        
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform
        
      - name: Prepare terraform.auto.tfvars from template
        env:
          GRAFANA_PASSWORD: ${{ secrets.GRAFANA_PASSWORD }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        run: |
          # Copiar o arquivo template
          cp terraform.auto.tfvars.template terraform.auto.tfvars
          
          # Substituir os placeholders com os valores das secrets
          sed -i "s/__GRAFANA_PASSWORD__/$GRAFANA_PASSWORD/g" terraform.auto.tfvars
          sed -i "s/__LETSENCRYPT_EMAIL__/$LETSENCRYPT_EMAIL/g" terraform.auto.tfvars
          
          # Exibir mensagem de confirma칞칚o sem revelar valores sens칤veis
          echo "Arquivo terraform.auto.tfvars criado com sucesso a partir do template"
        working-directory: ./terraform
        
      - name: Setup Kubeconfig for Local Run
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          # Criar diret칩rio tempor치rio
          mkdir -p /tmp
          
          # Criar arquivo kubeconfig para execu칞칚o local
          echo "$KUBECONFIG_CONTENT" > /tmp/kubeconfig
          chmod 600 /tmp/kubeconfig
          
          # Exportar vari치vel de ambiente para o Terraform
          echo "TF_VAR_kube_config_path=/tmp/kubeconfig" >> $GITHUB_ENV
          
          echo "Arquivo kubeconfig tempor치rio criado para execu칞칚o local"
        working-directory: ./terraform
        
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./terraform
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ./terraform
        continue-on-error: true
        
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 游둛\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization 丘뙖잺\`${{ steps.init.outcome }}\`
            #### Terraform Validation 游뱄\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 游닀\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform
       
