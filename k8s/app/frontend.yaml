apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: joke-app
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
      - name: wait-for-backend
        image: busybox:1.36.1
        command: ['sh', '-c', 'until nslookup backend-service.joke-app.svc.cluster.local; do echo "Waiting for backend service"; sleep 2; done;']
      # Adicionado init container para tentar resolver o host do Grafana Agent, mas permite falha
      - name: check-grafana-agent
        image: busybox:1.36.1
        command: ['sh', '-c', 'nslookup grafana-agent.observability.svc.cluster.local || echo "Grafana Agent not found, continuing anyway"; exit 0']
      containers:
      - name: frontend
        image: leandrogamedesigner/joke-frontend:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "0.2"
            memory: "128Mi"
          requests:
            cpu: "0.1"
            memory: "64Mi"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          # readOnlyRootFilesystem: true # Temporariamente desabilitado para resolver problema de permissão
          runAsNonRoot: true
          runAsUser: 101
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-conf
        configMap:
          name: frontend-nginx-conf
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-conf
  namespace: joke-app
data:
  nginx.conf: |
    server {
      listen 80;
      server_name _;

      root /usr/share/nginx/html;
      index index.html;

      # Configuração para o frontend
      location / {
        try_files $uri $uri/ /index.html;
      }

      # Proxy para o backend
      location /api/ {
        set $backend_service "backend-service.joke-app.svc.cluster.local";
        proxy_pass http://$backend_service:3000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_pass_header X-Trace-ID;
      }

      # Endpoint para telemetria frontend
      location /telemetry {
        proxy_pass http://grafana-agent.observability.svc.cluster.local:4318/v1/traces;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Content-Type "application/json";
        proxy_intercept_errors on;
        error_page 500 502 503 504 = @fallback;
      }

      # Fallback para quando o Grafana Agent não estiver disponível
      location @fallback {
        return 200 '{"status":"ok","message":"telemetry fallback"}';
        add_header Content-Type application/json;
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: joke-app
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
